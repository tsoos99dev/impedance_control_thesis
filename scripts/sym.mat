clearvars;

% Delay
t_d = 0.005;

% Motor parameters
J = 6.34e-7;
Bm = 2.7e-7;
Km = 15.4e-3;
R = 5.61;
V = 12;

% Impedance parameters
syms Be Ke;
Me = 1*J;

% Impedance model
Aimp = [0 1; -Ke/Me -Be/Me];
Bimp = [0 0; Ke/Me 1/Me];
Cimp = eye(2);
Dimp = zeros(2);

% Motor model
Aaa = 0;
Aab = 1;
Aba = 0;
Abb = -(Bm/J+Km^2/(J*R));
A_b = [Aab; Abb];
A = [Aaa Aab; Aba Abb];

Bta = 0;
Btb = 1/J;
Bt = [Bta; Btb];
Bva = 0;
Bvb = Km/(J*R);
Bv = [Bva; Bvb];
B = [Bv Bt];
C = [1 0];
D = [0 0];

motor_model = ss(A, B, C, D);
Pm = pole(motor_model)';

% Pole placement
Pe_delta = (Me*A^2 + Be*A + Ke*eye(2))/Me;
Co = [Bv A*Bv];
K = [0 1]/Co*Pe_delta;
Ka = K(1);
Kb = K(2:end);

Po = 2*min(real(Pm));
Po_delta = Abb' - Po;
CoK = Aab';
Ko = (1/CoK * Po_delta)';

kc = (1-J/Me)*R/Km;

% Combined model
AA = [A-Bv*K Bv*Kb; zeros([1, 2]) Abb - Ko*Aab];
BB = [Bv*Ka Bt - Bv*kc; zeros([1, 2])];
CC = eye(3);
DD = zeros([3, 2]);

% Controller
Ahat = Abb - Ko*Aab;
Bhat = Ahat*Ko + Aba - Ko*Aaa;
Fhat_tau = Btb - Ko*Bta;
Fhat_v = Bvb - Ko*Bva;
Chat = [zeros([1, 2]); eye(2)];
Dhat = [1; Ko];

Atilde = Ahat - Fhat_v*Kb;
Btilde_r = Fhat_v*Ka;
Btilde_y = Bhat - Fhat_v*(Ka + Kb*Ko);
Btilde_tau = Fhat_tau - Fhat_v*kc;
Btilde = [Btilde_r Btilde_tau Btilde_y];
Ctilde = -Kb;
Dtilde = [Ka -kc -(Ka + Kb*Ko)];

% Digital controller
Adtilde = expm(Atilde*t_d);
Bdtilde = Atilde\(Adtilde-1)*Btilde;
Bdtilder = Bdtilde(:, 1);
Bdtildet = Bdtilde(:, 2);
Bdtildey = Bdtilde(:, 3);

Cdtilde = Ctilde;
Ddtilde = Dtilde;

% Digital motor model
Md = expm([A Bv; zeros([1, 3])]*t_d);
Ad = Md(1:2, 1:2);
Bd = Md(1:2, 3:end);
Cd = C;
Dd = D;

% Combined digital model
Adaa = Ad(1, 1);
Adab = Ad(1, 2:end);
Adba = Ad(2:end, 1);
Adbb = Ad(2:end, 2:end);

Bda = Bd(1, :);
Bdb = Bd(2:end, :);

AAdx = [-Bd*K Bd*Kb Ad zeros(2, 1)];

AAdexa = Adba + Adtilde*Ko - Ko*Adaa - Bdtildey;
AAdexb = Adbb - Adtilde - Ko*Adab;
AAdex1 = -(Bdb-Ko*Bda)*K;
AAdee = Adtilde;
AAdee1 = (Bdb-Ko*Bda)*Kb;
AAde = [AAdex1 AAdee1 AAdexa AAdexb AAdee];


AAd = [
    zeros(3, 3) eye(3)
    AAdx
    AAde
];

% Stability map
tolerance = 0.95;
fAAd = matlabFunction(AAd);
fstab = @(ko, bo) arrayfun(@(ki, bi) max(abs(eig(double(fAAd(bi*Me, ki^2*Me))))), ko, bo);
fsettle_imp = @(ko, bo) arrayfun(@(ki, bi) settling_time(bi/(2*ki), ki, tolerance), ko, bo);
fsettle = @(ko, bo, sto) arrayfun(@(ki, bi, sti) settle_map_num(fAAd, bi*Me, ki^2*Me, sti, t_d, tolerance), ko, bo, sto);

pn = 175;
xn = 0;
xm = 75;
yn = 0;
ym = 2*xm;
ko = linspace(xn,xm, pn);
bo = linspace(yn,ym, pn);
[KO, BO] = meshgrid(ko, bo);
stab = fstab(KO, BO);
KOs = KO(stab <= 1);
BOs = BO(stab <= 1);

settle_map_imp = fsettle_imp(KO, BO);
settle_map_imp(isnan(settle_map_imp)) = 0;
settle_map_imp(isinf(settle_map_imp)) = 0;
settle_map_imp(settle_map_imp == 0) = max(settle_map_imp, [], 'all');
settle_map = fsettle(KO, BO, settle_map_imp);
settle_err = (settle_map - settle_map_imp)./settle_map_imp;
settle_err(isnan(settle_err)) = inf;
settle_err(stab > 1) = nan;

DT = delaunayTriangulation([KOs, BOs]);
k = convexHull(DT);
xHull = DT.Points(k,1);
yHull = DT.Points(k,2);

z_val = BO./(2*KO);

% Plot
figure;
pbaspect([8,6,1])
set(gcf,'color','w');
set(gca, 'FontName', 'Helvetica');
hold on;

[M, c] = contourf(KO, BO, settle_err, [-1 -0.5 -0.25 -0.1:0.025:0.1 0.5 0.25 1],  '-k');
% clabel(M, c, "FontSize", 12, 'LabelSpacing', 550);
c.LineWidth = 0.5;
c.FaceAlpha = 0.4;
colormap(turbo);
clim([-0.1, 0.1])

p = plot(xHull,yHull,'Color', [0 0 0 0.5], 'LineWidth', 2);

[M, c] = contour(KO, BO, z_val, [0.1 0.25 0.5 1 2 4 8], '--k');
clabel(M, c, "FontSize", 12, 'LabelSpacing', 550);
c.LineWidth = 0.5;

[M, c] = contour(KO, BO, settle_map_imp, [0.1 0.15 0.2 0.25 0.35 0.5 1], '-.k');
clabel(M, c, "FontSize", 12, 'LabelSpacing', 550);
c.LineWidth = 0.75;

xlim([xn, xm])
ylim([yn, ym])

set(gca, 'Box', 'off', 'TickDir', 'out', 'TickLength', [.02 .02], ...
    'XMinorTick', 'on', 'YMinorTick', 'on', 'YGrid', 'on', ...
    'XColor', [.3 .3 .3], 'YColor', [.3 .3 .3], ...
    'LineWidth', 1)

xlabel('$w_0~\mathrm{[rad/s]}$', 'Interpreter', 'latex', 'FontSize', 16)
ylabel('$b_\mathrm{e}~\mathrm{[rad/s^2]}$', 'Interpreter', 'latex', 'FontSize', 16)

function st = settle_map_num(fAAd, bi, ki, sti, t_d, tol)
    AAsub = double(fAAd(bi, ki));
    x0 = 1;
    xf = 0;
    xi = [0 0 0 x0 0 0]';
    tf = 2*sti;
    sys = ss(AAsub,[],[0 0 0 1 0 0],[], t_d);
    st = settling_time_num(sys, xi, tf, tol, x0, xf);
end
